--- /Users/shotaro/DevHub/CG/generalized-hybrid-grains/src/python/analysis/allgrainh5.py
+++ /Users/shotaro/DevHub/CG/generalized-hybrid-grains/src/python/simulator/nagasu/allgrainh5.py
@@ -1,12 +1,21 @@
 import h5py

 import numpy as np

 from grainh5 import *

-

+import ctypes

 

 class AllSceneData:

     def __init__(self):

         self.templates = {}

         self.all_step_elements = []

+        self.all_step_elements_template_idx_array = np.zeros(1, dtype=ctypes.c_int)

+        self.all_step_elements_size_ratio_array = np.zeros(1, dtype=ctypes.c_float)

+        self.all_step_elements_center_of_mass_array = np.zeros((1, 2), dtype=ctypes.c_float)

+        self.all_step_elements_rotation_angle_array = np.zeros(1, dtype=ctypes.c_float)

+        self.all_step_elements_velocity_array = np.zeros((1, 2), dtype=ctypes.c_float)

+        self.all_step_elements_angular_velocity_array = np.zeros(1, dtype=ctypes.c_float)

+        self.all_step_elements_static_array = np.zeros(1, dtype=ctypes.c_int)

+        self.all_step_elements_template_idx_to_name_dict = {}

+

 

     def __load_templates(self, fileName):

         if fileName != "" and fileName[len(fileName)-3:] == ".h5":

@@ -124,6 +133,94 @@
         self.__load_templates(fn_template)

         self.__load_elements_from_idx(fn_element, idx)

 

+    def __load_elements(self, fileName):

+        if fileName != "" and fileName[len(fileName) - 3:] == ".h5":

+

+            template_idx_to_name_dict = {}

+            with h5py.File(fileName, 'r') as h5_elements:

+                keys = list(map(str, h5_elements.keys()))

+                keys.remove('force_num')

+                keys = list(map(int, keys))

+                newlist = sorted(keys)

+                for t in newlist:

+                    data_group = h5_elements[str(t)]

+                    e_group = data_group['elements_2d']

+                    tn_group = data_group['template_name_dict']

+                    template_idxs = list(tn_group.keys())

+

+                    for i in template_idxs:

+                        template_idx_to_name_dict.update([(int(i), tn_group[i][0].decode())])

+

+                    template_idx_array = np.array(e_group['template_idx'], dtype=np.int32)

+                    size_ratio_array = np.array(e_group['size_ratio'], dtype=np.float64)

+                    center_of_mass_array = np.array(e_group['center_of_mass'], dtype=np.float64)

+                    rotation_angle_array = np.array(e_group['rotation_angle'], dtype=np.float64)

+                    velocity_array = np.array(e_group['velocity'], dtype=np.float64)

+                    angular_velocity_array = np.array(e_group['angular_velocity'], dtype=np.float64)

+                    static_array = np.array(e_group['static'], dtype=np.int8)

+                    # static_array = np.array(e_group['static'], dtype=np.bool)

+

+                    num_elems = len(size_ratio_array)

+

+                    scene_data = SceneData()

+                    for i in range(num_elems):

+                        e = Element()

+                        e.template_name = template_idx_to_name_dict[template_idx_array[i]]

+                        e.size_ratio = size_ratio_array[i]

+                        e.center_of_mass = center_of_mass_array[:, i]

+                        e.rotation_angle = rotation_angle_array[i]

+                        e.velocity = velocity_array[:, i]

+                        # e.angular_velocity = angular_velocity_array[i]

+                        e.static = False if static_array[i] == 0 else True

+                        e.static = static_array[i]

+                        scene_data.elements.append(e)

+                    scene_data.templates = self.templates

+                    self.all_step_elements.append(scene_data)

+

+    def load(self, fn_template, fn_element):

+        self.__load_templates(fn_template)

+        self.__load_elements(fn_element)

+

+    def __load_elements_from_idx_for_simulation(self, fileName, idx):

+        self.all_step_elements_template_idx_array = np.zeros(1, dtype=ctypes.c_int)

+        self.all_step_elements_size_ratio_array = np.zeros(1, dtype=ctypes.c_float)

+        self.all_step_elements_center_of_mass_array = np.zeros((1, 2), dtype=ctypes.c_float)

+        self.all_step_elements_rotation_angle_array = np.zeros(1, dtype=ctypes.c_float)

+        self.all_step_elements_velocity_array = np.zeros((1, 2), dtype=ctypes.c_float)

+        self.all_step_elements_angular_velocity_array = np.zeros(1, dtype=ctypes.c_float)

+        self.all_step_elements_static_array = np.zeros(1, dtype=ctypes.c_int)

+

+        if fileName != "" and fileName[len(fileName) - 3:] == ".h5":

+

+            self.all_step_elements_template_idx_to_name_dict = {}

+            with h5py.File(fileName, 'r') as h5_elements:

+                # idx番目のkeyを取得する

+                keys = list(map(str, h5_elements.keys()))

+                if 'force_num' in keys:

+                    keys.remove('force_num')

+                keys = list(map(int, keys))

+                newlist = sorted(keys)

+

+                data_group = h5_elements[str(newlist[idx])]

+                e_group = data_group['elements_2d']

+                tn_group = data_group['template_name_dict']

+                template_idxs = list(tn_group.keys())

+

+                for i in template_idxs:

+                    self.all_step_elements_template_idx_to_name_dict.update([(int(i), tn_group[i][0].decode())])

+

+                self.all_step_elements_template_idx_array = np.array(e_group['template_idx'], dtype=np.int32)

+                self.all_step_elements_size_ratio_array = np.array(e_group['size_ratio'], dtype=np.float64)

+                self.all_step_elements_center_of_mass_array = np.array(e_group['center_of_mass'], dtype=np.float64).transpose()

+                self.all_step_elements_rotation_angle_array = np.array(e_group['rotation_angle'], dtype=np.float64)

+                self.all_step_elements_velocity_array = np.array(e_group['velocity'], dtype=np.float64).transpose()

+                self.all_step_elements_angular_velocity_array = np.array(e_group['angular_velocity'], dtype=np.float64).transpose()

+                self.all_step_elements_static_array = np.array(e_group['static'], dtype=np.int8)

+

+    def load_from_idx_for_simulation(self, fn_template, fn_element, idx):

+        self.__load_templates(fn_template)

+        self.__load_elements_from_idx_for_simulation(fn_element, idx)

+

     @staticmethod

     def get_key_list(filename):

         if filename == "" or filename[len(filename) - 3:] != ".h5":
