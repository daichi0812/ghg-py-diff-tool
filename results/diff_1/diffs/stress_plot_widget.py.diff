--- /Users/shotaro/DevHub/CG/generalized-hybrid-grains/src/python/analysis/stress_plot_widget.py
+++ /Users/shotaro/DevHub/CG/generalized-hybrid-grains/src/python/simulator/nagasu/stress_plot_widget.py
@@ -19,10 +19,10 @@
 

 class StressPlotCanvas(FigureCanvas):

     def __init__(self, parent=None, width=5, height=4, dpi=100):

-        fig = Figure(figsize=(width, height), dpi=dpi)

-        self.axes = fig.add_subplot(1, 1, 1)

-

-        FigureCanvas.__init__(self, fig)

+        self.fig = Figure(figsize=(width, height), dpi=dpi)

+        self.axes = self.fig.add_subplot(1, 1, 1)

+

+        FigureCanvas.__init__(self, self.fig)

         self.setParent(parent)

 

         self.all_stress_pair_data = AllStressPairData()

@@ -43,6 +43,17 @@
 

         self.x_grad = 24.24894563

         self.y_grad = 0

+

+        self.x_shift = 0.0

+        self.y_shift = 0.0

+        self.zoom = 0.0

+

+        self.past_move_x = 0.0

+        self.past_move_y = 0.0

+        self.past_zoom = 1.0

+

+        self.shift_volume = 1000.0

+

 

     def calc_moving_average(self):

         count = 0

@@ -108,6 +119,38 @@
 

         self.set_axis()

         self.draw()

+

+    def set_move_plot_range_x(self, x_move):

+        self.x_shift = self.x_shift + x_move - self.past_move_x

+        self.past_move_x = x_move

+        self.axes.axis(

+            [(-self.current_lim + self.x_shift * self.shift_volume / self.current_lim),

+             (self.current_lim + self.x_shift * self.shift_volume / self.current_lim),

+             (-self.current_lim + self.y_shift * self.shift_volume / self.current_lim),

+             (self.current_lim + self.y_shift * self.shift_volume / self.current_lim)])

+        self.draw()

+

+    def set_move_plot_range_y(self, y_move):

+        self.y_shift = self.y_shift + y_move - self.past_move_y

+        self.past_move_y = y_move

+        self.axes.axis(

+            [(-self.current_lim + self.x_shift * self.shift_volume / self.current_lim),

+             (self.current_lim + self.x_shift * self.shift_volume / self.current_lim),

+             (-self.current_lim + self.y_shift * self.shift_volume / self.current_lim),

+             (self.current_lim + self.y_shift * self.shift_volume / self.current_lim)])

+        self.draw()

+

+    def set_zoom_plot(self, zoom):

+        self.current_lim = self.current_lim * zoom / self.past_zoom

+        self.past_zoom = zoom

+        self.axes.axis(

+            [(-self.current_lim + self.x_shift * self.shift_volume / self.current_lim),

+             (self.current_lim + self.x_shift * self.shift_volume / self.current_lim),

+             (-self.current_lim + self.y_shift * self.shift_volume / self.current_lim),

+             (self.current_lim + self.y_shift * self.shift_volume / self.current_lim)])

+

+        self.draw()

+

 

     @staticmethod

     def compute_principal_stress(stress_pair):

@@ -168,7 +211,11 @@
 

         self.axes.plot([0.0, -self.max_lim], [0.0, self.y(-self.max_lim)], color='m', linewidth=self.line_width)

 

-        self.axes.axis([-self.current_lim, self.current_lim, -self.current_lim, self.current_lim])

+        self.axes.axis(

+            [(-self.current_lim + self.x_shift * self.shift_volume / self.current_lim),

+             (self.current_lim + self.x_shift * self.shift_volume / self.current_lim),

+             (-self.current_lim + self.y_shift * self.shift_volume / self.current_lim),

+             (self.current_lim + self.y_shift * self.shift_volume / self.current_lim)])

         self.axes.grid()

 

     def replot(self):

@@ -210,11 +257,20 @@
         self.y_grad = y_grad

         self.stride = stride

         self.line_width = width

-        self.replot()

+        self.init_slider_parameter()

+        self.replot()

+

+    def init_slider_parameter(self):

+        self.x_shift = 0.0

+        self.y_shift = 0.0

+        self.past_move_x = 0.0

+        self.past_move_y = 0.0

+        self.past_zoom = 1.0

 

     def reset_current_lim(self):

         self.current_lim = self.max_lim

         self.replot()

+        self.init_slider_parameter()

 

     def set_cell_pos(self, cell_pos):

         self.cell_pos_list = cell_pos
